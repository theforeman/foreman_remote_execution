<% if job_invocation.targeting.resolved_at %>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
    <tr>
      <th><%= _('Host') %></th>
      <th><%= _('Provider') %></th>
      <th><%= _('Status') %></th>
      <th><%= _('Actions') %></th>
    </tr>
    </thead>

    <tbody>
      <% job_invocation.targeting.hosts.order("#{Host.table_name}.name").each do |host| %>
        <tr>
          <% task = job_invocation.sub_tasks.joins(:locks).where("#{ForemanTasks::Lock.table_name}.resource_type" => 'Host::Managed', "#{ForemanTasks::Lock.table_name}.resource_id" => host.id).first %>
          <td><%= link_to_if_authorized host.name, hash_for_host_path(host).merge(:auth_object => host, :permission => :view_hosts) %></td>
          <td><%= remote_execution_provider_for(task) %></td>
          <td><%= template_invocation_status(task) %></td>
          <td><%= action_buttons(template_invocation_actions(task, host)) %></td>
        </tr>
      <% end %>
    </tbody>
  </table>
<% else %>
  <div class="alert alert-warning">
    <%= _("The dynamic query '#{job_invocation.targeting.search_query}' was not resolved yet. The list of hosts to which it would resolve now can be seen") %>
    <%= link_to('here.', hosts_url(:search => job_invocation.targeting.search_query)) %>
  </div>
<% end %>
